@page "/"

@using Markdig
@rendermode InteractiveServer

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject AssistenteIAApiClient AssistenteApi
@inject IJSRuntime JS

<PageTitle>Chat</PageTitle>

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            Chat
        </div>
        <div class="card-body chat-container" style="height: 70vh; overflow-y: auto;" @ref="chatContainer">
            @foreach (var message in messages)
            {
                <div class="message @(message.Autor == "Você" ? "user-message" : "ia-message")">
                    <strong>@message.Autor: </strong>
                    @if (message.Autor == "Você")
                        @message.Texto
                    else
                    {
                        @((MarkupString)Markdig.Markdown.ToHtml(message.Texto))

                        @if (message.Dados != null && message.Dados.Any())
                        {
                            <table class="table table-striped mt-2">
                                <thead>
                                    <tr>
                                        @foreach (var coluna in message.Dados.First().Keys)
                                        {
                                            <th>@coluna</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var linha in message.Dados)
                                    {
                                        <tr>
                                            @foreach (var valor in linha.Values)
                                            {
                                                <td>@valor</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    }
                        
                </div>
            }
        </div>
        <div class="card-footer">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Digite sua mensagem..."
                       @bind-value="userInput" @bind-value:event="oninput" @onkeydown="HandleKeyDown" />
                <div class="input-group-append">
                    <button class="btn btn-primary" @onclick="SendMessage" disabled="@isSending">
                        @(isSending ? "Enviando..." : "Enviar")
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private string? userInput { get; set; }

    private bool isSending = false; 

    private List<ChatMessage> messages = new List<ChatMessage>();
    private ElementReference chatContainer;

    public class ChatMessage
    {
        public string Autor { get; set; } = default!;
        public string Texto { get; set; } = default!;
        public List<Dictionary<string, object>>? Dados { get; set; }
    }

    private async Task SendMessage()
    {
        Console.WriteLine(userInput);
        if (string.IsNullOrWhiteSpace(userInput) || isSending)
            return;

        var mensagem = userInput;
        userInput = string.Empty;
        // Adiciona a mensagem do usuário
        messages.Add(new ChatMessage { Autor = "Você", Texto = mensagem });
        await ScrollToBottomAsync();

        isSending = true;
        StateHasChanged();

        try
        {
            // Chama o Assistente API para obter a resposta
            var resposta = await AssistenteApi.PostMessage(mensagem);
            messages.Add(new ChatMessage { Autor = "Assistente", Texto = resposta.Mensagem, Dados = resposta.Dados });
        }
        catch (Exception ex)
        {
            // Em caso de erro, exibe mensagem de erro no chat
            messages.Add(new ChatMessage { Autor = "Erro", Texto = $"Não foi possível obter resposta da IA. {ex}" });
            Console.Error.WriteLine($"Erro ao enviar mensagem: {ex.Message}");
        }
        finally
        {
            isSending = false;
        }

        await ScrollToBottomAsync();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottomAsync()
    {
        await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
    }  

}
